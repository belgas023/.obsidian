/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var E=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var H=(C,y)=>{for(var t in y)E(C,t,{get:y[t],enumerable:!0})},D=(C,y,t,i)=>{if(y&&typeof y=="object"||typeof y=="function")for(let d of L(y))!P.call(C,d)&&d!==t&&E(C,d,{get:()=>y[d],enumerable:!(i=V(y,d))||i.enumerable});return C};var N=C=>D(E({},"__esModule",{value:!0}),C);var $={};H($,{default:()=>w});module.exports=N($);var c=require("obsidian"),x=require("@codemirror/view"),b={tooltipTextColor:"var(--text-normal)",tooltipBackgroundColor:"var(--background-primary)",tooltipBorderColor:"var(--background-modifier-border)",boldTextColor:"var(--bold-color)"},w=class extends c.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new k(this.app,this)),this.registerMarkdownPostProcessor((t,i)=>{let d=document.createTreeWalker(t,NodeFilter.SHOW_TEXT,null),l=[],r;for(;r=d.nextNode();)l.push(r);l.forEach(o=>{let e=o.textContent;if(!e)return;let n=/(?<!\[)\[([^[\]{}]+)\]\{([^}]*)\}/g,u,p=0,m=[];for(;(u=n.exec(e))!==null;){u.index>p&&m.push(document.createTextNode(e.slice(p,u.index)));let[h,v,a]=u,s=document.createElement("span");s.classList.add("hover-reveal-container");let S=document.createElement("span");S.classList.add("hover-reveal"),S.textContent=v;let g=document.createElement("div");g.classList.add("hover-reveal-tooltip"),c.MarkdownRenderer.render(this.app,a,g,"",this),S.appendChild(g),s.appendChild(S),s.addEventListener("mouseover",()=>{let T=g.getBoundingClientRect();if(T.width===0)return;let f=document.querySelector(".workspace-split.mod-vertical.mod-root");if(!f)return;let B=f.getBoundingClientRect(),R=B.left,M=B.right;T.left<R?(g.style.left="0",g.style.transform="translateX(0)"):T.right>M&&(g.style.left="auto",g.style.right="0",g.style.transform="translateX(0)")}),s.addEventListener("mouseout",T=>{let f=T.relatedTarget;f&&g.contains(f)||(g.style.visibility="hidden",g.style.opacity="0",setTimeout(()=>{g.style.left="50%",g.style.right="auto",g.style.transform="translateX(-50%)",g.style.visibility="",g.style.opacity=""},200))}),m.push(s),p=u.index+h.length}if(p<e.length&&m.push(document.createTextNode(e.slice(p))),m.length>0&&o.parentNode){let h=document.createDocumentFragment();m.forEach(v=>h.appendChild(v)),o.parentNode.replaceChild(h,o)}})}),this.registerEditorExtension(this.hoverRevealExtension()),this.addCommand({id:"insert-hover-reveal",name:"Insert Hover Reveal Syntax",editorCallback:(t,i)=>{this.insertHoverRevealSyntax(t)}}),this.addCommand({id:"navigate-hover-reveal",name:"Navigate in Hover Reveal Syntax",editorCallback:(t,i)=>{this.navigateHoverRevealSyntax(t)}})}onunload(){let t=document.getElementById("hover-reveal-custom-styles");t&&t.remove()}async loadSettings(){this.settings=Object.assign({},b,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}insertHoverRevealSyntax(t){let i=t.getCursor(),d=t.getSelection();if(d){let l=`[${d}]{}`;t.replaceSelection(l);let r=t.getCursor(),o={line:r.line,ch:r.ch-1};t.setCursor(o),new c.Notice("Hover syntax inserted! Type your tooltip text.")}else{let l="[]{}";t.replaceRange(l,i);let r={line:i.line,ch:i.ch+1};t.setCursor(r),new c.Notice("Hover syntax inserted! Type visible text, then Tab to tooltip.")}}navigateHoverRevealSyntax(t){let i=t.getCursor(),d=t.getLine(i.line),l=/\[([^[\]{}]*)\]\{([^}]*)\}/g,r,o=null;for(;(r=l.exec(d))!==null;){let e=r.index,n=r.index+r[0].length;if(i.ch>=e&&i.ch<=n){o={fullMatch:r[0],visibleText:r[1],tooltipText:r[2],start:e,end:n,visibleStart:e+1,visibleEnd:e+1+r[1].length,tooltipStart:e+r[1].length+3,tooltipEnd:e+r[1].length+3+r[2].length};break}}o?i.ch>=o.visibleStart&&i.ch<=o.visibleEnd?(t.setCursor({line:i.line,ch:o.tooltipStart}),new c.Notice("Moved to tooltip text area")):i.ch>=o.tooltipStart&&i.ch<=o.tooltipEnd?(t.setCursor({line:i.line,ch:o.visibleStart}),new c.Notice("Moved to visible text area")):(t.setCursor({line:i.line,ch:o.visibleStart}),new c.Notice("Moved to visible text area")):new c.Notice("No hover reveal syntax found at cursor position")}hoverRevealExtension(){let t=this;class i extends x.WidgetType{constructor(o,e,n,u,p,m){super();this.visibleText=o;this.tooltipText=e;this.from=n;this.to=u;this.view=p;this.isActive=m}toDOM(){let o=document.createElement("span");if(this.isActive)o.textContent=`[${this.visibleText}]{${this.tooltipText}}`;else{o.classList.add("hover-reveal");let e=document.createElement("span");c.MarkdownRenderer.render(t.app,this.visibleText,e,"",t).then(()=>{var p;let u=((p=e.querySelector("p"))==null?void 0:p.innerHTML)||this.visibleText;e.innerHTML=u}),o.appendChild(e);let n=document.createElement("div");n.classList.add("hover-reveal-tooltip"),c.MarkdownRenderer.render(t.app,this.tooltipText,n,"",t),o.appendChild(n)}return o.addEventListener("mouseover",()=>{let e=o.querySelector(".hover-reveal-tooltip");if(!e)return;let n=e.getBoundingClientRect();if(n.width===0)return;let u=document.querySelector(".workspace-split.mod-vertical.mod-root");if(!u)return;let p=u.getBoundingClientRect(),m=p.left,h=p.right;n.left<m?(e.style.left="0",e.style.transform="translateX(0)"):n.right>h&&(e.style.left="auto",e.style.right="0",e.style.transform="translateX(0)"),e.addEventListener("mouseout",v=>{let a=v.relatedTarget;a&&o.contains(a)||(e.style.visibility="hidden",e.style.opacity="0",setTimeout(()=>{e.style.left="50%",e.style.right="auto",e.style.transform="translateX(-50%)",e.style.visibility="",e.style.opacity=""},200))})}),o.addEventListener("mouseout",e=>{let n=o.querySelector(".hover-reveal-tooltip");if(!n)return;let u=e.relatedTarget;u&&n.contains(u)||(n.style.visibility="hidden",n.style.opacity="0",setTimeout(()=>{n.style.left="50%",n.style.right="auto",n.style.transform="translateX(-50%)",n.style.visibility="",n.style.opacity=""},200))}),o}eq(o){return o.visibleText===this.visibleText&&o.tooltipText===this.tooltipText&&o.from===this.from&&o.to===this.to&&o.isActive===this.isActive}}return[x.ViewPlugin.fromClass(class{constructor(l){this.decorations=this.buildDecorations(l)}update(l){(l.docChanged||l.viewportChanged||l.selectionSet)&&(this.decorations=this.buildDecorations(l.view))}buildDecorations(l){let r=[],o=l.state.doc.toString(),e=/(?<!\[)\[([^[\]{}]+)\]\{([^}]*)\}/g,n;for(;(n=e.exec(o))!==null;){let[u,p,m]=n,h=n.index,v=h+u.length,a=l.state.selection.main.from;a>=h&&a<=v||r.push(x.Decoration.replace({widget:new i(p,m,h,v,l,!1),inclusive:!0}).range(h,v))}return x.Decoration.set(r)}},{decorations:l=>l.decorations})]}updateStyles(){let t=document.createElement("style");t.id="hover-reveal-custom-styles",t.textContent=`
			.hover-reveal-tooltip {
				color: ${this.settings.tooltipTextColor} !important;
				background-color: ${this.settings.tooltipBackgroundColor} !important;
				border-color: ${this.settings.tooltipBorderColor} !important;
			}
			.hover-reveal-tooltip::after {
				border-top-color: ${this.settings.tooltipBackgroundColor} !important;
			}
			.hover-reveal {
				color: ${this.settings.boldTextColor} !important;
			}
		`;let i=document.getElementById("hover-reveal-custom-styles");i&&i.remove(),document.head.appendChild(t)}},k=class extends c.PluginSettingTab{constructor(t,i){super(t,i);this.plugin=i}getComputedColor(t){var l;let i=document.createElement("div");document.body.appendChild(i),i.style.color=t;let d=getComputedStyle(i).color;if(document.body.removeChild(i),d.startsWith("rgb")){let[r,o,e]=((l=d.match(/\d+/g))==null?void 0:l.map(Number))||[0,0,0];return`#${r.toString(16).padStart(2,"0")}${o.toString(16).padStart(2,"0")}${e.toString(16).padStart(2,"0")}`}return d||t}display(){let{containerEl:t}=this;t.empty(),new c.Setting(t).setName("Reset settings").setDesc("Reset all settings to default values").addButton(a=>a.setButtonText("Reset").onClick(async()=>{this.plugin.settings.tooltipTextColor=b.tooltipTextColor,this.plugin.settings.tooltipBackgroundColor=b.tooltipBackgroundColor,this.plugin.settings.tooltipBorderColor=b.tooltipBorderColor,this.plugin.settings.boldTextColor=b.boldTextColor,await this.plugin.saveSettings(),this.display(),this.plugin.updateStyles(),new c.Notice("Reset settings to default")}));let i,d,l=this.getComputedColor(this.plugin.settings.tooltipTextColor);new c.Setting(t).setName("Tooltip text color").setDesc("Set the text color of the tooltip").addText(a=>(i=a.setPlaceholder("var(--text-normal)").setValue(l).onChange(async s=>{this.plugin.settings.tooltipTextColor=s,d.setValue(s),await this.plugin.saveSettings(),this.plugin.updateStyles()}),i)).addColorPicker(a=>(d=a.setValue(l).onChange(async s=>{this.plugin.settings.tooltipTextColor=s,i.setValue(s),await this.plugin.saveSettings(),this.plugin.updateStyles()}),d));let r,o,e=this.getComputedColor(this.plugin.settings.tooltipBackgroundColor);new c.Setting(t).setName("Tooltip background color").setDesc("Set the background color of the tooltip").addText(a=>(r=a.setPlaceholder("var(--background-primary)").setValue(e).onChange(async s=>{this.plugin.settings.tooltipBackgroundColor=s,o.setValue(s),await this.plugin.saveSettings(),this.plugin.updateStyles()}),r)).addColorPicker(a=>(o=a.setValue(e).onChange(async s=>{this.plugin.settings.tooltipBackgroundColor=s,r.setValue(s),await this.plugin.saveSettings(),this.plugin.updateStyles()}),o));let n,u,p=this.getComputedColor(this.plugin.settings.tooltipBorderColor);new c.Setting(t).setName("Tooltip border color").setDesc("Set the border color of the tooltip").addText(a=>(n=a.setPlaceholder("var(--background-modifier-border)").setValue(p).onChange(async s=>{this.plugin.settings.tooltipBorderColor=s,u.setValue(s),await this.plugin.saveSettings(),this.plugin.updateStyles()}),n)).addColorPicker(a=>(u=a.setValue(p).onChange(async s=>{this.plugin.settings.tooltipBorderColor=s,n.setValue(s),await this.plugin.saveSettings(),this.plugin.updateStyles()}),u));let m,h,v=this.getComputedColor(this.plugin.settings.boldTextColor);new c.Setting(t).setName("Bold text color").setDesc("Set the color of the bold text").addText(a=>(m=a.setPlaceholder("var(--bold-color)").setValue(v).onChange(async s=>{this.plugin.settings.boldTextColor=s,h.setValue(s),await this.plugin.saveSettings(),this.plugin.updateStyles()}),m)).addColorPicker(a=>(h=a.setValue(v).onChange(async s=>{this.plugin.settings.boldTextColor=s,m.setValue(s),await this.plugin.saveSettings(),this.plugin.updateStyles()}),h))}};

/* nosourcemap */